<?php

class ContractsMasterController extends Controller
{
	/**
	 * @var string the default layout for the views. Defaults to '//layouts/column2', meaning
	 * using two-column layout. See 'protected/views/layouts/column2.php'.
	 */
	public $layout='//layouts/column2';

	/**
	 * @return array action filters
	 */
	public function filters()
	{
		return array(
			'accessControl', // perform access control for CRUD operations
			'postOnly + delete', // we only allow deletion via POST request
		);
	}

	/**
	 * Specifies the access control rules.
	 * This method is used by the 'accessControl' filter.
	 * @return array access control rules
	 */
	public function accessRules()
	{
		return array(
			array('allow',  // allow all users to perform 'index' and 'view' actions
				'actions'=>array('index','view'),
				'users'=>array('*'),
			),
			array('allow', // allow authenticated user to perform 'create' and 'update' actions
				'actions'=>array('create','update','landsearch','landresult', 'searchbuyers', 'searchrealstate', 'createcontract'),
				'users'=>array('@'),
			),
			array('allow', // allow admin user to perform 'admin' and 'delete' actions
				'actions'=>array('admin','delete'),
				'users'=>array('admin'),
			),
			array('deny',  // deny all users
				'users'=>array('*'),
			),
		);
	}

	/**
	 * Displays a particular model.
	 * @param integer $id the ID of the model to be displayed
	 */
	public function actionView($id)
	{
		$this->render('view',array(
			'model'=>$this->loadModel($id),
		));
	}

    public function actionLandsearch()
    {
        $this->render("landsearch");
    }



/*
LandResult will receive ajax-request from the view land-search and return Deed ID, Land ID and customer names who currently own that land as per the Deed-master and Deed-detail tables.
*/
    public function actionLandresult()
    {
		
            if(isset($_POST["data"])) //check that this action is only called using POST.. not get, not regular.
            {
           		
           			$deedIds = array();
                    
                    $searchstring = json_decode($_POST["data"]); 
                    $searchstring = "%". $searchstring . "%"; 
					
                    $searchCriteria=new CDbCriteria;
                    $searchCriteria->condition = 'CustomerNameArabic LIKE :searchstring OR MobilePhone LIKE :searchstring';
                    $searchCriteria->params = array(':searchstring'=> $searchstring);
                    $searchCriteria->order = 'CustomerID';
                    $searchCriteria->limit = 20000;
                    // Get all customers that matched
                   
                    if (!strpos($searchstring,"/"))
	                {
		                $customerResult = CustomerMaster::model()->findAll($searchCriteria);
		                
		                // Get all their IDs
		                $customerIds = array();
		                foreach($customerResult as $customer)
		                {
		                    $customerIds[] = $customer->CustomerID;

		                }
		                // Look for Deeds where customer appear
		                $deedDetails = DeedDetails::model()->findAllByAttributes(array("CustomerID"=>$customerIds));
		                // Get all deed MASTER ids (unique)
		           	
		           		foreach($deedDetails as $deed)
		                {
		                    $deedIds[] = $deed->DeedID;

		                }
		                
               		}
               		else
               		{
               			$searchCriteria = new CDbCriteria;
               			$searchCriteria->condition = 'LandID LIKE :searchstring';
               			$searchCriteria->params = array(':searchstring'=>$searchstring);
               			$deeds = DeedMaster::model()->findAll($searchCriteria);
               			
               			foreach($deeds as $deed)
               			{
               				$deedIds[] = $deed->DeedID;
           				}
           			}
                    
                    
                    
                    $tempIds = array_unique($deedIds); //unique of above
                    $deedIds = array();
                    
                    foreach($tempIds as $deed)
                    {
                        $deedIds[] = $deed; //array_unique returns key->value ..so this is just to take the value and chuck out the key! and we put it back in deedIds()
                    }
                    
                    // Get all Deed Master
                    $deedMasters = DeedMaster::model()->findAllByAttributes(array("DeedID"=>$deedIds));

                    // Construct the Result
                    $searchResult = array();

                    foreach($deedMasters as $deedMaster)
                    {
                		if($deedMaster->Remarks!=="cancelled")
                		{
                            $object = new stdClass;
                            $object->LandId = $deedMaster->LandID;
                            $object->DeedId = $deedMaster->DeedID;
                            $object->CustomerNameArabic = "";

                            $deedDetails = $deedMaster->deedDetails;
                           
                            foreach($deedDetails as $deedDetail)
                            {
                            $object->CustomerNameArabic .= $deedDetail->customer->CustomerNameArabic ."___";
                            }
							
                            $hajzDetails = $deedMaster->hajzMasters;
                            foreach($hajzDetails as $hajz)
                            {
                            	if ($hajz->IsActive>0)
                            	{
                                $object->hajzDetails.= $hajz->HajzID."=>".$hajz->TypeDetail.",";    
                                $object->hajzID[] = $hajz->HajzID;
                                }
                            }
                             $searchResult[] = $object;

						}
                        
                         
              		}
                    
                    

                    print CJSON::encode($searchResult);
			}
            else
            {
                throw new CHttpException(404,'The requested page does not exist.');
            }
    }
//**End of function above**//


/*Finally save the contract into the contract-master, contract-details, deed-master and deed-details using data coming from create.php*/
    public function actionCreatecontract()
    {
            $result = new StdClass;
            $result->error = 1;
            $result->message =array();
            if(isset($_POST["data"]))
            {
                    $data = json_decode($_POST["data"]);
                    $owner = $data->owners;
                    $buyer  = $data->buyers;
                    if(count($owner)==0)
                    {
                            $result->message[] = "No Selected Owner";

                    }
                    if(count($buyer)==0)
                    {
                            $result->message[] = "No Selected Buyers";
                    }
                    if(intval($data->contractamount)==0)
                     {
                            $result->message[] = "No  Amount";
                    }
                    
                    if(count( $result->message)==0)
                    {             
                            $deedMaster = DeedMaster::model()->findByPk($data->deedId); 
           
                            $contractMaster = new ContractsMaster();
                            $contractMaster->LandID = $deedMaster->LandID;
                            $contractMaster->DateCreated = date("Y-m-d");
                            $contractMaster->UserID = 1; // Yii::app()->user->id;
                            $contractMaster->ContractType = $data->contractype;
                            $contractMaster->DeedID = $deedMaster->DeedID;
                            $contractMaster->SchemeID = $deedMaster->SchemeID;
                            $contractMaster->AmountEntered = intval($data->contractamount);
                            $contractMaster->Fee = intval( $data->feeamount);
                             if(  $contractMaster->save())
                            {
                                   // owner
                                    $owners = $data->owners;
                                    foreach($owners as $customer)
                                    {
                                            $deedLine = DeedDetails::model()->findByAttributes(array("DeedID"=>$deedMaster->DeedID, "CustomerID"=>$customer));
                                            $contractDetail = new ContractsDetail();
                                            $contractDetail->ContractID = $contractMaster->ContractsID;
                                            $contractDetail->Type = "seller";
                                            $contractDetail->CustomerID = $customer;
                                            $contractDetail->Share = $deedLine->Share;
                                            $contractDetail->RealEstateID = 0;
                                            $contractDetail->Side = "";
                                            $contractDetail->save();
                                    }
                                    // buyers
                                    $buyers = $data->buyers;
                                    foreach($buyers as $customer)
                                    {
                                            $deedLine = DeedDetails::model()->findByAttributes(array("DeedID"=>$deedMaster->DeedID, "CustomerID"=>$customer->buyerid));
                                            $contractDetail = new ContractsDetail();
                                            $contractDetail->ContractID = $contractMaster->ContractsID;
                                            $contractDetail->Type = "buyer";
                                            $contractDetail->CustomerID = $customer->buyerid;
                                            if(($customer->shareval==0) && ($deedLine))
                                            {
                                                    $contractDetail->Share = $deedLine->Share;
                                            }
                                            else
                                            {
                                                     $contractDetail->Share = $customer->shareval;
                                            }
                                            $contractDetail->RealEstateID = null;
                                            $contractDetail->Side = "";
                                            if(! $contractDetail->save())
                                            {
                                                    foreach($contractDetail->getErrors() as $key => $value)
                                                    {
                                                                    $result->message[] = $key . " >>> " . $value . "<br/>";
                                                    }
                                            }
                                    }
                                    // real estate
                                    $realstates = $data->realstate;
                                    foreach($realstates as $estate)
                                    {
                                           
                                            if($estate->isbuyer=="1")
                                            {
                                                $contractDetail = new ContractsDetail();
                                                $contractDetail->ContractID = $contractMaster->ContractsID;
                                                $contractDetail->Type = "estate";
                                                $contractDetail->CustomerID = 0;
                                                $contractDetail->Share = 0;
                                                $contractDetail->RealEstateID =$estate->stateid;
                                                 $contractDetail->Side = "buyer";
                                                 $contractDetail->save();
                                            }
                                            if($estate->isseller=="1")
                                            {
                                                $contractDetail = new ContractsDetail();
                                                $contractDetail->ContractID = $contractMaster->ContractsID;
                                                $contractDetail->Type = "estate";
                                                $contractDetail->CustomerID = 0;
                                                $contractDetail->Share = 0;
                                                $contractDetail->RealEstateID =$estate->stateid;
                                                 $contractDetail->Side = "seller";
                                                 $contractDetail->save();
                                            }
                                    }
                                    // save new deed
                                   $newdeed = new DeedMaster();
 
                                 
                                    $newdeed->LandID =  $deedMaster->LandID;
                                    $newdeed->SchemeID = $deedMaster->SchemeID;
                                    $newdeed->DateCreated = date("Y-m-d");
                                    $newdeed->UserID = 1;
                                    $newdeed->ContractID = $contractMaster->ContractsID;
                                    $newdeed->InvoiceNo =123;
 //                                   $newdeed->Docs => later to be put from scanned copies
                                    $newdeed->Remarks = "From Contract creation number ". $contractMaster->ContractsID;
//                                    $deedMaster->Remarks="FALSE";
                    
                                   if($newdeed->save())
                                  {
                                        $buyers = $data->buyers;
                                        foreach($buyers as $customer)
                                        {
                                                $olddeedLine = DeedDetails::model()->findByAttributes(array("DeedID"=>$deedMaster->DeedID, "CustomerID"=>$customer->buyerid));
                                                $deedline = new DeedDetails();
                                                $deedline->DeedID = $newdeed->DeedID;
                                                $deedline->CustomerID = $customer->buyerid;
                                                if(($customer->shareval==0) && ($olddeedLine))
                                                {
                                                        $deedline->Share = $olddeedLine->Share;
                                                }
                                                else
                                                {
                                                         $deedline->Share = $customer->shareval;
                                                }
                                              
                                                if(! $deedline->save())
                                                {
                                                        foreach($deedline->getErrors() as $key => $value)
                                                        {
                                                                        $result->message[] = $key . " >>> " . $value . "<br/>";
                                                        }
                                                }
                                        }

                                  }
                                    if(count($result->message)==0)
                                    {
                                        $result->error = 0;
                                        $result->message = array();
                                    }
                            	$deedMaster->Remarks="cancelled"; //set old deed to cancelled, so it isn't shown in the deed's list upon searching again
                            	$deedMaster->save();
                            }
                            else
                            {
                                   foreach($contractMaster->getErrors() as $key => $value)
                                    {
                                                    $result->message[] = $key . " >>> " . $value . "<br/>";
                                    }
                            }
                    }
                 
                 
                   // Yii::log('', CLogger::LEVEL_INFO,"found it:   " . $data->contractamount);
                  
            }
             print CJSON::encode($result);
    }
	/**
	 * Step 2 of create a contract. This follows from landsearch-view where we direct the page here, by passing in the Deed Id
	 * The Deed Id serves as the input to the Contract Form and through it we have the rest of the info (current owners etc)
	 */
	public function actionCreate()
	{
    
		    if(isset($_GET["id"]))
            {
            	
            
                    $deedId = $_GET["id"]; //retrieve value passed from landsearch.php's clicking of a record @inititemrecord
                    // Master Deed
                    $deedMaster = DeedMaster::model()->findByPk($deedId);
					//echo "here...";
                    // Customer names for search ->this will serve the auto-complete textbox.
                    $customerList =CustomerMaster::model()->FindAll('CustomerID < 22000');
					$customerArray = array();

                    foreach($customerList as $customer)
                    {   
							
                            //$customerArray[] = $customer->CustomerNameEnglish;
                            $customerArray[] = $customer->CustomerNameArabic;
                            

                    }
                    // Get all real estates -> this will serve the auto-complete textbox.
                    $realstateList = RealEstateOffices::model()->findAll();
                    $realstateNames = array();
                    foreach($realstateList as $realstate)
                    { 
                            $realstateNames[] = $realstate->CommercialName;
                    }
                    //send to view with the deedMaster object, a full list of customer names and a full list of real estate office names
                   // the magic is in the view. 
                    $this->render('create',array(
			            'deedMaster'=>$deedMaster,
                        'customerNames'=>$customerArray,
                        'realstateNames'=>$realstateNames
		            ));
            }
            else
            {
                 throw new CHttpException(404,'The requested page does not exist.');
            }
	}
//** End of function above


    public function actionSearchbuyers()
    {
            if(isset($_POST["data"]))
            {
                    $searchstring = json_decode($_POST["data"]);
                    $customer = CustomerMaster::model()->findByAttributes(array("CustomerNameArabic"=>$searchstring));
                    if(!$customer)
                    {
                           $customer = CustomerMaster::model()->findByAttributes(array("CustomerNameEnglish"=>$searchstring));
                    }
                    if($customer)
                    {
                           // Yii::log('', CLogger::LEVEL_INFO,"found it");
                            print CJSON::encode($customer);
                    }
                    else
                    {
                            //Yii::log('', CLogger::LEVEL_INFO,"found it not");
                            print "error";
                    }
            }
    }

    public function actionSearchrealstate()
    {
            $searchstring = json_decode($_POST["data"]);
            $realstate = RealEstateOffices::model()->findByAttributes(array("CommercialName"=>$searchstring));
            if($realstate)
            {   
                    // Yii::log('', CLogger::LEVEL_INFO,"found it");
                    print CJSON::encode($realstate);
                    //Yii::log('', CLogger::LEVEL_INFO,"found it not");
            }
            else
            {
                     print "error";
            }
    }
/*
public function actionCreate()
	{
		$model=new ContractsMaster;

		// Uncomment the following line if AJAX validation is needed
		// $this->performAjaxValidation($model);

		if(isset($_POST['ContractsMaster']))
		{
			$model->attributes=$_POST['ContractsMaster'];
			if($model->save())
				$this->redirect(array('view','id'=>$model->ContractsID));
		}

		$this->render('create',array(
			'model'=>$model,
		));
	}

*/

	/**
	 * Updates a particular model.
	 * If update is successful, the browser will be redirected to the 'view' page.
	 * @param integer $id the ID of the model to be updated
	 */
	public function actionUpdate($id)
	{
		$model=$this->loadModel($id);

		// Uncomment the following line if AJAX validation is needed
		// $this->performAjaxValidation($model);

		if(isset($_POST['ContractsMaster']))
		{
			$model->attributes=$_POST['ContractsMaster'];
			if($model->save())
				$this->redirect(array('view','id'=>$model->ContractsID));
		}

		$this->render('update',array(
			'model'=>$model,
		));
	}

	/**
	 * Deletes a particular model.
	 * If deletion is successful, the browser will be redirected to the 'admin' page.
	 * @param integer $id the ID of the model to be deleted
	 */
	public function actionDelete($id)
	{
		$this->loadModel($id)->delete();

		// if AJAX request (triggered by deletion via admin grid view), we should not redirect the browser
		if(!isset($_GET['ajax']))
			$this->redirect(isset($_POST['returnUrl']) ? $_POST['returnUrl'] : array('admin'));
	}

	/**
	 * Lists all models.
	 */
	public function actionIndex()
	{

					/*	$dataProvider=new CActiveDataProvider('ContractsMaster');
						$this->render('index',array(
							'dataProvider'=>$dataProvider,
						));*/
			$this->render('landsearch');
	}

	/**
	 * Manages all models.
	 */
	public function actionAdmin()
	{
		$model=new ContractsMaster('search');
		$model->unsetAttributes();  // clear any default values
		if(isset($_GET['ContractsMaster']))
			$model->attributes=$_GET['ContractsMaster'];

		$this->render('admin',array(
			'model'=>$model,
		));
	}

	/**
	 * Returns the data model based on the primary key given in the GET variable.
	 * If the data model is not found, an HTTP exception will be raised.
	 * @param integer the ID of the model to be loaded
	 */
	public function loadModel($id)
	{
		$model=ContractsMaster::model()->findByPk($id);
		if($model===null)
			throw new CHttpException(404,'The requested page does not exist.');
		return $model;
	}

	/**
	 * Performs the AJAX validation.
	 * @param CModel the model to be validated
	 */
	protected function performAjaxValidation($model)
	{
		if(isset($_POST['ajax']) && $_POST['ajax']==='contracts-master-form')
		{
			echo CActiveForm::validate($model);
			Yii::app()->end();
		}
	}
}
